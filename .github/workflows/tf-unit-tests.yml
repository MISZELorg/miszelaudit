name: 'Terraform Unit Tests'

on:
  push:

permissions:
  security-events: write # Needed to upload-sarif
  contents: read # Needed to clone repo
  actions: read # Potentially needed for private repositories (see https://github.com/github/codeql-action/issues/2117)

jobs:

  create-aci:
    name: 'Create Azure Container Instance'
    runs-on: ubuntu-latest # Change this as needed to match your environment
    
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        
      # Login to Azure
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Ensure this secret is set in your repo

      # Create ACI
      - name: Create ACI
        id: create_aci
        run: |
          randomInt=$(($RANDOM % 9999))
          aciResourceGroupName="runners-rg"
          aciName="kmiszelaci-$randomInt"
          acrLoginServer="kmiszelacr.azure.io"
          acrUsername="${{ secrets.ACR_USERNAME }}" # Store in GitHub secrets
          acrPassword="${{ secrets.ACR_PASSWORD }}" # Store in GitHub secrets
          image="$acrLoginServer/github-runner-lin:2.320.0"
          pat="${{ secrets.PAT_TOKEN }}" # Store in GitHub secrets
          githubOrg="MISZELorg"
          githubRepo="testrunner"
          vnetName="runners-vnet"
          subnetName="default2"

          az container create --resource-group "$aciResourceGroupName" \
            --name "$aciName" \
            --image "$image" \
            --registry-login-server "$acrLoginServer" \
            --registry-username "$acrUsername" \
            --registry-password "$acrPassword" \
            --environment-variables GH_TOKEN="$pat" GH_OWNER="$githubOrg" \
            --vnet "$vnetName" \
            --subnet "$subnetName"

          echo "aci_name=$aciName" >> $GITHUB_ENV

  terraform-unit-tests:
    name: 'Terraform Unit Tests'
    runs-on: testrunner
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=false

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Perform a security scan of the terraform code using checkov
    # - name: Run Checkov action
    #   id: checkov
    #   uses: bridgecrewio/checkov-action@master
    #   with: 
    #     framework: terraform

    # Upload results to GitHub Advanced Security
    # - name: Upload SARIF file
    #   if: success() || failure()
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: results.sarif
    #     category: checkov

  remove-aci:
    name: 'Remove Azure Container Instance'
    runs-on: ubuntu-latest # Change this as needed to match your environment
    needs: create-aci # Ensure this job runs after the create-aci job

    steps:
      # Login to Azure
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Remove ACI
      - name: Remove ACI
        run: |
          aciResourceGroupName="runners-rg"
          aciName="${{ env.aci_name }}"

          az container delete --resource-group "$aciResourceGroupName" \
            --name "$aciName" \
            --yes --force-deletion
